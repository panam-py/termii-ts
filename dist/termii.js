"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const termii_switch = require("./termii_switch");
const termii_token = require("./termii_token");
const termii_insight = require("./termii_insight");
class Client {
    constructor(API_KEY) {
        this.API_KEY = API_KEY;
    }
    async fetchSenderIds() {
        let response = await termii_switch.getSenderIds(this.API_KEY);
        return response;
    }
    async requestSenderId(senderId, useCase, company) {
        let response = await termii_switch.requestNewSenderId(this.API_KEY, senderId, useCase, company);
        return response;
    }
    async sendMessage(numberTo, senderId, message, messageType, channel, mediaObj) {
        let response;
        if (mediaObj) {
            response = await termii_switch.postMessage(this.API_KEY, numberTo, senderId, message, messageType, channel, mediaObj);
        }
        else {
            response = await termii_switch.postMessage(this.API_KEY, numberTo, senderId, message, messageType, channel);
        }
        return response;
    }
    async sendBulkSms(numbersTo, senderId, message, messageType, channel) {
        let response = await termii_switch.postMessageBulk(this.API_KEY, numbersTo, senderId, message, messageType, channel);
        return response;
    }
    async sendMessageWithAutogeneratedNumber(numberTo, message) {
        let response = await termii_switch.numberMessageSend(this.API_KEY, numberTo, message);
        return response;
    }
    async sendDeviceTemplate(phoneNumber, deviceId, templateId, data) {
        let response = await termii_switch.templateSetter(this.API_KEY, phoneNumber, deviceId, templateId, data);
        return response;
    }
    async fetchPonebooks() {
        let response = await termii_switch.getPhonebooks(this.API_KEY);
        return response;
    }
    async createPhonebooks(description, phonebookName) {
        let response = await termii_switch.makePhonebook(this.API_KEY, description, phonebookName);
        return response;
    }
    async updatePhonebook(phonebookId, phonebookName, phonebookDescription) {
        let response = await termii_switch.patchPhonebook(this.API_KEY, phonebookId, phonebookName, phonebookDescription);
        return response;
    }
    async deletePhonebook(phonebookId) {
        let response = await termii_switch.removePhonebook(this.API_KEY, phonebookId);
        return response;
    }
    async fetchContacts(phonebookId) {
        let response = await termii_switch.getContactsFromPhonebook(this.API_KEY, phonebookId);
        return response;
    }
    async addNewContact(phoneNumber, phonebookId, options) {
        let response;
        if (options) {
            response = await termii_switch.addContact(this.API_KEY, phoneNumber, phonebookId, options);
        }
        else {
            response = await termii_switch.addContact(this.API_KEY, phoneNumber, phonebookId);
        }
        return response;
    }
    async addContacts(contactFile, countryCode, phonebookId) {
        let response = await termii_switch.addManyContacts(this.API_KEY, contactFile, countryCode, phonebookId);
        return response;
    }
    async deleteContact(contactId) {
        let response = await termii_switch.deleteOneContact(this.API_KEY, contactId);
        return response;
    }
    async sendCampaign(countryCode, senderId, message, channel, messageType, phonebookId, campaignType, scheduleSmsStatus, scheduleTime) {
        let response;
        if (scheduleTime && scheduleSmsStatus) {
            response = await termii_switch.makeCampaign(this.API_KEY, countryCode, senderId, message, channel, messageType, phonebookId, campaignType, scheduleSmsStatus, scheduleTime);
        }
        else if (scheduleTime && !scheduleSmsStatus) {
            throw new Error("scheduleSmsStatus and scheduleTime must be passed together");
        }
        else if (!scheduleTime && scheduleSmsStatus) {
            throw new Error("scheduleSmsStatus and scheduleTime must be passed together");
        }
        else {
            response = await termii_switch.makeCampaign(this.API_KEY, countryCode, senderId, message, channel, messageType, phonebookId, campaignType);
        }
        return response;
    }
    async fetchCampaigns() {
        let response = await termii_switch.getCampaigns(this.API_KEY);
        return response;
    }
    async fetchCampaignHistory(campaignId) {
        let response = await termii_switch.getCampaignHistory(this.API_KEY, campaignId);
        return response;
    }
    async sendToken(messageType, numberTo, senderId, channel, pinAttempts, pinTimeToLive, pinLength, pinPlaceholder, messageText) {
        let response = await termii_token.sendNewToken(this.API_KEY, messageType, numberTo, senderId, channel, pinAttempts, pinTimeToLive, pinLength, pinPlaceholder, messageText);
        return response;
    }
    async voiceToken(phoneNumber, pinAttempts, pinTimeToLive, pinLength) {
        let response = await termii_token.sendVoiceToken(this.API_KEY, phoneNumber, pinAttempts, pinTimeToLive, pinLength);
        return response;
    }
    async voiceCall(phoneNumber, code, pinAttempts, pinTimeToLive, pinLength) {
        let response = await termii_token.makeVoiceCall(this.API_KEY, phoneNumber, code, pinAttempts, pinTimeToLive, pinLength);
        return response;
    }
    async verifyToken(pinId, pin) {
        let response = await termii_token.verifySentToken(this.API_KEY, pinId, pin);
        return response;
    }
    async inAppToken(pinType, phoneNumber, pinAttempts, pinTimeToLive, pinLength) {
        let response = await termii_token.sendTokenInApp(this.API_KEY, pinType, phoneNumber, pinAttempts, pinTimeToLive, pinLength);
        return response;
    }
    async getBalance() {
        let response = await termii_insight.checkBalance(this.API_KEY);
        return response;
    }
    async searchNumber(phoneNumber) {
        let response = await termii_insight.checkNumber(this.API_KEY, phoneNumber);
        return response;
    }
    async fetchHistory() {
        let response = await termii_insight.getFullHistory(this.API_KEY);
        return response;
    }
}
exports.Client = Client;
