import * as termii_switch from "./termii_switch";
import * as termii_token from "./termii_token";
import * as termii_insight from "./termii_insight";
import { MediaObjInterface, OptionsInterface } from "./interfaces";

export class Client {
  readonly API_KEY: string;

  constructor(API_KEY: string) {
    this.API_KEY = API_KEY;
  }

  async fetchSenderIds() {
    let response: object = await termii_switch.getSenderIds(this.API_KEY);
    return response;
  }

  async requestSenderId(senderId: string, useCase: string, company: string) {
    let response: object = await termii_switch.requestNewSenderId(
      this.API_KEY,
      senderId,
      useCase,
      company
    );
    return response;
  }

  async sendMessage(
    numberTo: string,
    senderId: string,
    message: string,
    messageType: string,
    channel: string,
    mediaObj?: MediaObjInterface
  ) {
    let response: object;
    if (mediaObj) {
      response = await termii_switch.postMessage(
        this.API_KEY,
        numberTo,
        senderId,
        message,
        messageType,
        channel,
        mediaObj
      );
    } else {
      response = await termii_switch.postMessage(
        this.API_KEY,
        numberTo,
        senderId,
        message,
        messageType,
        channel
      );
    }

    return response;
  }

  async sendBulkSms(
    numbersTo: string[],
    senderId: string,
    message: string,
    messageType: string,
    channel: string
  ) {
    let response: object = await termii_switch.postMessageBulk(
      this.API_KEY,
      numbersTo,
      senderId,
      message,
      messageType,
      channel
    );
    return response;
  }

  async sendMessageWithAutogeneratedNumber(numberTo: string, message: string) {
    let response: object = await termii_switch.numberMessageSend(
      this.API_KEY,
      numberTo,
      message
    );
    return response;
  }

  async sendDeviceTemplate(
    phoneNumber: string,
    deviceId: string,
    templateId: string,
    data: object
  ) {
    let response: object = await termii_switch.templateSetter(
      this.API_KEY,
      phoneNumber,
      deviceId,
      templateId,
      data
    );
    return response;
  }

  async fetchPonebooks() {
    let response: object = await termii_switch.getPhonebooks(this.API_KEY);
    return response;
  }

  async createPhonebooks(description: string, phonebookName: string) {
    let response: object = await termii_switch.makePhonebook(
      this.API_KEY,
      description,
      phonebookName
    );
    return response;
  }

  async updatePhonebook(
    phonebookId: string,
    phonebookName: string,
    phonebookDescription: string
  ) {
    let response: object = await termii_switch.patchPhonebook(
      this.API_KEY,
      phonebookId,
      phonebookName,
      phonebookDescription
    );
    return response;
  }

  async deletePhonebook(phonebookId) {
    let response: object = await termii_switch.removePhonebook(
      this.API_KEY,
      phonebookId
    );
    return response;
  }

  async fetchContacts(phonebookId) {
    let response: object = await termii_switch.getContactsFromPhonebook(
      this.API_KEY,
      phonebookId
    );
    return response;
  }

  async addNewContact(
    phoneNumber: string,
    phonebookId: string,
    options?: OptionsInterface
  ) {
    let response: object;
    if (options) {
      response = await termii_switch.addContact(
        this.API_KEY,
        phoneNumber,
        phonebookId,
        options
      );
    } else {
      response = await termii_switch.addContact(
        this.API_KEY,
        phoneNumber,
        phonebookId
      );
    }
    return response;
  }

  async addContacts(
    contactFile: string,
    countryCode: string,
    phonebookId: string
  ) {
    let response: object = await termii_switch.addManyContacts(
      this.API_KEY,
      contactFile,
      countryCode,
      phonebookId
    );
    return response;
  }

  async deleteContact(contactId) {
    let response: object = await termii_switch.deleteOneContact(
      this.API_KEY,
      contactId
    );
    return response;
  }

  async sendCampaign(
    countryCode: string,
    senderId: string,
    message: string,
    channel: string,
    messageType: string,
    phonebookId: string,
    campaignType: string,
    scheduleSmsStatus?: string,
    scheduleTime?: string
  ) {
    let response: object;
    if (scheduleTime && scheduleSmsStatus) {
      response = await termii_switch.makeCampaign(
        this.API_KEY,
        countryCode,
        senderId,
        message,
        channel,
        messageType,
        phonebookId,
        campaignType,
        scheduleSmsStatus,
        scheduleTime
      );
    } else if (scheduleTime && !scheduleSmsStatus) {
      throw new Error(
        "scheduleSmsStatus and scheduleTime must be passed together"
      );
    } else if (!scheduleTime && scheduleSmsStatus) {
      throw new Error(
        "scheduleSmsStatus and scheduleTime must be passed together"
      );
    } else {
      response = await termii_switch.makeCampaign(
        this.API_KEY,
        countryCode,
        senderId,
        message,
        channel,
        messageType,
        phonebookId,
        campaignType
      );
    }

    return response;
  }

  async fetchCampaigns() {
    let response: object = await termii_switch.getCampaigns(this.API_KEY);
    return response;
  }

  async fetchCampaignHistory(campaignId: string) {
    let response: object = await termii_switch.getCampaignHistory(
      this.API_KEY,
      campaignId
    );
    return response;
  }

  async sendToken(
    messageType: string,
    numberTo: string,
    senderId: string,
    channel: string,
    pinAttempts: string,
    pinTimeToLive: number,
    pinLength: number,
    pinPlaceholder: string,
    messageText: string
  ) {
    let response: object = await termii_token.sendNewToken(
      this.API_KEY,
      messageType,
      numberTo,
      senderId,
      channel,
      pinAttempts,
      pinTimeToLive,
      pinLength,
      pinPlaceholder,
      messageText
    );
    return response;
  }

  async voiceToken(
    phoneNumber: string,
    pinAttempts: number,
    pinTimeToLive: number,
    pinLength: number
  ) {
    let response: object = await termii_token.sendVoiceToken(
      this.API_KEY,
      phoneNumber,
      pinAttempts,
      pinTimeToLive,
      pinLength
    );
    return response;
  }

  async voiceCall(
    phoneNumber: string,
    code: number,
    pinAttempts: number,
    pinTimeToLive: number,
    pinLength: number
  ) {
    let response: object = await termii_token.makeVoiceCall(
      this.API_KEY,
      phoneNumber,
      code,
      pinAttempts,
      pinTimeToLive,
      pinLength
    );
    return response;
  }

  async verifyToken(pinId: string, pin: string) {
    let response: object = await termii_token.verifySentToken(
      this.API_KEY,
      pinId,
      pin
    );
    return response;
  }

  async inAppToken(
    pinType: string,
    phoneNumber: string,
    pinAttempts: number,
    pinTimeToLive: number,
    pinLength: number
  ) {
    let response: object = await termii_token.sendTokenInApp(
      this.API_KEY,
      pinType,
      phoneNumber,
      pinAttempts,
      pinTimeToLive,
      pinLength
    );
    return response;
  }

  async getBalance() {
    let response: object = await termii_insight.checkBalance(this.API_KEY);
    return response;
  }

  async searchNumber(phoneNumber: string) {
    let response: object = await termii_insight.checkNumber(
      this.API_KEY,
      phoneNumber
    );
    return response;
  }

  async fetchHistory() {
    let response: object = await termii_insight.getFullHistory(this.API_KEY);
    return response;
  }
}
